using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SimpleToDoAppAPI.Models;

public partial class SimpleToDoAppDbContext : DbContext
{
    public SimpleToDoAppDbContext()
    {
    }

    public SimpleToDoAppDbContext(DbContextOptions<SimpleToDoAppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<ToDoTask> ToDoTasks { get; set; }

    // This method is autogenerated from Scaffolding DbContext.
    // This automatically gets the context from the connection string provided during scaffolding.
    // To allow for custom connection string, this is commented out to prevent default connection to LocalDbConnection
    // Instead, an injection was placed in program.cs with the connection string setting option

    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //    => optionsBuilder.UseSqlServer("Name=LocalDbConnection");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.ToTable("Categories");
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<ToDoTask>(entity =>
        {
            entity.ToTable("Tasks"); // Added since the POCO has a different name
            entity.HasKey(e => e.Id).HasName("PK_Task");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Title).HasMaxLength(100);

            entity.HasOne(d => d.Category).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_Tasks_Categories");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
